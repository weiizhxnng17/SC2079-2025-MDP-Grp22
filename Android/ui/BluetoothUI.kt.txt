package com.example.mdp_group22.ui.theme

import androidx.compose.foundation.layout.Arrangement
import androidx.compose.foundation.layout.Box
import androidx.compose.foundation.layout.Column
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.foundation.layout.padding
import androidx.compose.material.icons.Icons
import androidx.compose.material.icons.filled.Close
import androidx.compose.material3.CircularProgressIndicator
import androidx.compose.material3.Icon
import androidx.compose.material3.IconButton
import androidx.compose.material3.MaterialTheme
import androidx.compose.material3.Surface
import androidx.compose.material3.Text
import androidx.compose.runtime.Composable
import androidx.compose.runtime.collectAsState
import androidx.compose.runtime.getValue
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.unit.dp
import androidx.hilt.navigation.compose.hiltViewModel
import com.example.mdp_group22.bluetooth.presentation.BluetoothViewModel
import com.example.mdp_group22.bluetooth.presentation.DeviceScreen


@Composable
fun BluetoothScreen(onBack: () -> Unit) {
    val viewModel = hiltViewModel<BluetoothViewModel>()
    val state by viewModel.state.collectAsState()

    Surface(color = Color(0xFF3A4231)) {
        when {
            state.isConnecting -> {
                Box(Modifier.fillMaxSize()) {
                    IconButton(
                        onClick = viewModel::disconnectFromDevice,
                        modifier = Modifier.align(Alignment.TopEnd).padding(16.dp)
                    ) { Icon(Icons.Default.Close, contentDescription = "Cancel", tint = GameBoyColors.Pixel) }

                    Column(
                        modifier = Modifier.align(Alignment.Center),
                        horizontalAlignment = Alignment.CenterHorizontally,
                        verticalArrangement = Arrangement.Center
                    ) {
                        CircularProgressIndicator()
                        Text("Connecting...",
                            color = GameBoyColors.Pixel)
                    }
                }
            }
            else -> {
                DeviceScreen(
                    state = state,
                    onStartScan = viewModel::startScan,
                    onStopScan = viewModel::stopScan,
                    onDeviceClick = viewModel::connectToDevice,
                    onStartServer = viewModel::waitForIncomingConnections,
                    onDisconnect = viewModel::disconnectFromDevice,
                    onBack = onBack
                )
            }
        }
    }
}
